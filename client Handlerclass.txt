//client Handlerclass


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ClientHandler implements Runnable {

    private ArrayList<ClientHandle> connections;
    private ArrayList<String> users;
    private ServerSocket server;
    private boolean done;
    private ExecutorService pool;
    private Map<String, Integer> reportCount; // Map to store report count for each user


    public ClientHandler() {
        reportCount = new HashMap<>();
        connections = new ArrayList<>();
        users = new ArrayList<>();
        done = false;
    }

    @Override
    public void run() {
        try {
            server = new ServerSocket(9999);
            pool = Executors.newCachedThreadPool();
            while (!done) {
                Socket client = server.accept();
                ClientHandle clientHandler = new ClientHandle(client);
                connections.add(clientHandler);
                pool.execute(clientHandler);
            }
        } catch (Exception e) {
            shutdown();
        }
    }

    public void broadcast(String msg) {
        for (ClientHandle ch : connections) {
            if (ch != null) {
                ch.sendMessage(msg);
            }
        }
    }

    public void shutdown() {
        done = true;
        if (!server.isClosed()) {
            try {
                server.close();
                for (ClientHandle ch : connections) {
                    ch.shutdown();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public String functions(){

        return """
                /nickname --> you can change your username!
                /private --> You can Send Any connected user private message
                /functions --> see how to use functions
                /users --> See Connected users
                /Report --> conduct the report Section 
                /quit --> You will be quit.""";
    }

    public void sendPrivateMessage(String senderName, String receiverName, String messageContent) {
        boolean receiverFound = false;
        for (ClientHandle ch : connections) {
            if (ch.getNickname().equals(receiverName)) {
                ch.sendMessage("[" + senderName + " sent a private message: " + messageContent + "]");
                receiverFound = true;
                break;
            }
        }
        if (!receiverFound) {
            for (ClientHandle ch : connections) {
                if (ch.getNickname().equals(senderName)) {
                    ch.sendMessage("Error: Receiver '" + receiverName + "' not found or offline.");
                    break;
                }
            }
        }
    }

    public  String getConnectedUsers() {
        return "Connected users: " + users;
    }

    public void reportUser(String userName) {
        int count = reportCount.getOrDefault(userName, 1); // Get the current report count for the user
        count++; // Increment the report count
        reportCount.put(userName, count); // Update the report count in the map
        System.out.println("Report Has been Done to:" +userName);
        if (count >= 3) { // If the report count is equal to or greater than 3, kick the user
            kickUser(userName);
        }
    }

    public void kickUser(String userName) {
        broadcast(userName + " has been kicked."); // Broadcast a message that the user has been kicked
        connections.removeIf(ch -> ch.nickname.equals(userName)); // Remove the user from connections list
        reportCount.remove(userName); // Remove the user's report count from the map
    }

    class ClientHandle implements Runnable {

        private Socket client;
        private BufferedReader in;
        private PrintWriter out;
        private String nickname;

        public ClientHandle(Socket client) {
            this.client = client;
        }

        public void run() {
            try {
                out = new PrintWriter(client.getOutputStream(), true);
                in = new BufferedReader(new InputStreamReader(client.getInputStream()));
                out.println("Enter Your Nickname:");
                nickname = in.readLine();
                users.add(nickname);
                reportCount.put(nickname,1);
                System.out.println(nickname + " Connected.");
                broadcast(nickname + " Connected.");

                String message;

                boolean nicknameSet = true; // Flag to check if nickname is already set
                while ((message = in.readLine()) != null) {
                    if (!nicknameSet) {
                        out.println("Please set your nickname first.");
                        continue; // Skip processing the message until nickname is set
                    }

                    if (message.startsWith("/nickname")) {
                        String[] messageSplit = message.split(" ", 2);
                        if (messageSplit.length == 2) {
                            broadcast(nickname + " Renamed to: " + messageSplit[1]);
                            System.out.println(nickname + " Renamed to: " + messageSplit[1]);
                            nickname = messageSplit[1];
                            out.println("Name changed to: " + nickname);
                        } else {
                            out.println("No nickname provided.");
                        }

                    }
                    else if(message.equalsIgnoreCase("/function")){
                        functions();
                    }
                    else if (message.startsWith("/report")) {
                        String[] messageSplit = message.split(" ", 2);
                        if (messageSplit.length == 2) {
                            reportUser(messageSplit[1]); // Report the specified user

                        } else {
                            out.println("Invalid report command.");
                        }
                    }
                    else if (message.equalsIgnoreCase("/users")) {
                        out.println(getConnectedUsers());
                    } else if (message.startsWith("/private")) {
                        String[] parts = message.split(" ", 3);
                        if (parts.length == 3) {
                            sendPrivateMessage(nickname, parts[1], parts[2]);
                        } else {
                            out.println("Error: Invalid syntax. Usage: /private <recipient> <message>");
                        }

                    }
                    else if (message.startsWith("/quit")) {
                        broadcast(nickname + " Left the chat.");
                        users.remove(nickname);
                        reportCount.remove(nickname);
                        shutdown();
                    } else {
                        broadcast(nickname + ": " + message);
                    }
                    nicknameSet = true; // Set nicknameSet to true after the first message
                }
            } catch (IOException e) {
                shutdown();
            }
        }

        public void sendMessage(String msg) {
            out.println(msg);
        }

        public void shutdown() {
            try {
                in.close();
                out.close();
                client.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public String getNickname() {
            return nickname;
        }
    }

    public static void main(String[] args) {
        ClientHandler server = new ClientHandler();
        Thread serverThread = new Thread(server);
        serverThread.start();
    }
}